import spoon.Launcher;
import spoon.reflect.code.CtInvocation;
import spoon.reflect.declaration.CtElement;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtType;
import spoon.reflect.factory.Factory;
import spoon.reflect.visitor.filter.TypeFilter;

import java.util.ArrayList;

public class Analyse  {

    public static void main(String[] args) {
        ArrayList<CtMethod<?>> listMethods = new ArrayList<CtMethod<?>>();
        ArrayList<CtMethod<?>> listMethodsToKeep = new ArrayList<CtMethod<?>>();
        ArrayList<CtMethod<?>> mainMethods = new ArrayList<CtMethod<?>>();

        Launcher spoon = new Launcher();
        spoon.addInputResource("src/main/resources/");
        spoon.run();
        Factory factory = spoon.getFactory();

        // recuperation de la liste complete des methodes du projet a analyser.
        for (CtType<?> s : factory.Class().getAll()) {
            for (CtMethod<?> m : s.getMethods()) {
                listMethods.add(m);
            }
        }

        // recuperation des methodes main du projet a analyser.
        for (CtMethod<?> m : factory.Method().getMainMethods()) {
            mainMethods.add(m);
        }

        // pour chacune des methodes main
        for (CtMethod<?> mainMethod : mainMethods) {
            //on recupere toute les invocations dans le corp de la methode
            for (CtInvocation<?> i : (ArrayList<CtInvocation<?>>) mainMethod.getBody().getElements(new TypeFilter(CtInvocation.class))) {
                //P
                //for (CtInvocation<?> l : (ArrayList<CtInvocation<?>>) i.getElements(new TypeFilter(CtInvocation.class))) {
                    String rep = pickMethodNameFromAnCtInvocation(i);

                    for (CtMethod<?> m : listMethods) {
                        if (rep.equals(m.getSimpleName())) {
                            System.out.println("get a match");
                            listMethodsToKeep.add(m);
                            System.out.println(m.getBody().getElements(new TypeFilter(CtInvocation.class)));
                        }
                    }
                //}
            }

        }

    }

    private static String pickMethodNameFromAnCtInvocation(CtInvocation<?> invocation){
        String rep = invocation.getShortRepresentation();
        rep = rep.split("#")[1];
        rep = rep.split("\\(")[0];
        System.out.println(rep);
        return rep;
    }
}


_______________________________________________________________________________________________________________________________________________


import spoon.Launcher;
import spoon.reflect.code.CtInvocation;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtPackage;
import spoon.reflect.declaration.CtType;
import spoon.reflect.factory.Factory;
import spoon.reflect.visitor.filter.TypeFilter;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Analyse  {


    /*
    list1 = methodBody.getElements(new TypeFilter(CtAssignment.class));
     */

    public static void main(String[] args) {
        ArrayList<CtMethod<?>> listMethods = new ArrayList<CtMethod<?>>();
        CtMethod<?> mainMethod = null;

        Launcher spoon = new Launcher();
        spoon.addInputResource("src/main/resources/");
        spoon.run();
        Factory factory = spoon.getFactory();
        // list all packages of the model
       /* for (CtPackage p : factory.Package().getAll()) {
            System.out.println("package: " + p.getQualifiedName());
        }
        // list all classes of the model
        for (CtType<?> s : factory.Class().getAll()) {
            System.out.println("class: " + s.getQualifiedName());
        }*/

        for (CtType<?> s : factory.Class().getAll()) {
            for (CtMethod<?> m : s.getMethods()) {
                listMethods.add(m);
                System.out.println("class: " + s.getQualifiedName() + " method: " + m.getSignature());
            }
        }

        for (CtMethod<?> m : factory.Method().getMainMethods()) {
            mainMethod = m;
            System.out.println("method: " + m.getSignature());
        }

        for (Object m : mainMethod.getBody().getElements(new TypeFilter(CtInvocation.class))){
            System.out.println("invocation : " + m.toString());
        }

    }
      /*  List<String> fileNames = getAllFilesNameFrom("src/main/resources/sma");

        for(String fileName : fileNames){
            //System.out.println(fileName);
        }
    }

    public static Launcher createLauncher() {

        final Launcher launcher = new Launcher();
        launcher.setArgs(new String[] {"--source-classpath","target/classes"});
        launcher.addInputResource("src/main/resources/");
        launcher.buildModel();

        return launcher;

    }

    public static List<String> getAllFilesNameFrom(String path){
        List<String> results = new ArrayList<String>();

        File[] files = new File(path).listFiles();

        for (File file : files) {
            if (file.isFile()){
                    if(file.getName().substring(file.getName().length()-5 , file.getName().length()).equals(".java")) {
                        results.add(file.getName().substring(0, file.getName().length() - 5));
                    }
            } else {
                results.addAll(getAllFilesNameFrom(file.getPath()));
            }
        }
        return results;
    }*/
}
